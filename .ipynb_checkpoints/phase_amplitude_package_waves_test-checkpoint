{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "69ded51a-e274-487d-a25d-3da48009527b",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import xarray as xr\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "from phase_amplitude_diagram.local_phase_amplitude_waves import full_dataset\n",
    "from phase_amplitude_diagram.local_phase_amplitude_waves import compute_amplitude_and_phase"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "a12a7112-5a8e-4995-982b-62ab5d5532c1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "\u001b[0;31mSignature:\u001b[0m \u001b[0mfull_dataset\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
       "\u001b[0;31mDocstring:\u001b[0m\n",
       "Process the full dataset in parallel for amplitude, theta, and phase.\n",
       "\n",
       "Parameters:\n",
       "- data (xr.Dataset): Input dataset containing spatial and temporal data.\n",
       "\n",
       "Returns:\n",
       "- xr.Dataset: Dataset containing amplitude, theta, and phase for each latitude and longitude combination.\n",
       "\u001b[0;31mFile:\u001b[0m      ~/Desktop/scripts_python/rainfall_vs_tropical_waves_chap2/git_projects/phase_amplitude/phase_amplitude_diagram/local_phase_amplitude_waves.py\n",
       "\u001b[0;31mType:\u001b[0m      function"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# For data over all gridpoints in a lat-lon region\n",
    "full_dataset?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "c5438868-01ad-4565-9381-bbac910964ff",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "\u001b[0;31mSignature:\u001b[0m\n",
       "\u001b[0mcompute_amplitude_and_phase\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m    \u001b[0mA\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mxarray\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcore\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdataarray\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mDataArray\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m    \u001b[0mstdA\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m    \u001b[0mstd_dA\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\n",
       "\u001b[0;34m\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mxarray\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcore\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdataset\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mDataset\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
       "\u001b[0;31mDocstring:\u001b[0m\n",
       "Compute amplitude, phase, and angle of scatter points from a time-series data array.\n",
       "\n",
       "Parameters:\n",
       "- A (xr.DataArray): Input time-series data array.\n",
       "- stdA: Standard deviation of A over all times, lons and lats.\n",
       "- std_dA: Standard deviation of dA/dt over all times, lons and lats.\n",
       "\n",
       "Returns:\n",
       "- xr.Dataset: Dataset containing amplitude, phase, and angle of scatter points.\n",
       "\u001b[0;31mFile:\u001b[0m      ~/Desktop/scripts_python/rainfall_vs_tropical_waves_chap2/git_projects/phase_amplitude/phase_amplitude_diagram/local_phase_amplitude_waves.py\n",
       "\u001b[0;31mType:\u001b[0m      function"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# For data over one lat-lon location or region\n",
    "compute_amplitude_and_phase?  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "664d5452-4520-4473-83d8-8c09e473b6e1",
   "metadata": {},
   "outputs": [],
   "source": [
    "wave = 'IG1'\n",
    "\n",
    "# Input wave filtered file\n",
    "fili1 = f'{wave}_imerg_filt.4x.5S.5N.nc'\n",
    "\n",
    "# Latitude band\n",
    "lati = -5\n",
    "latf = 5\n",
    "\n",
    "# Longitude band \n",
    "loni = -30\n",
    "lonf = 30\n",
    "\n",
    "# initialize the dataset and the filtered_variable\n",
    "f1 = xr.open_dataset(fili1)\n",
    "data1 = f1.filt.sel(lat=slice(lati,latf)).mean('lat')\n",
    "\n",
    "# Standard deviations of the field and its time derivative over all times and lons in the latitude band(s)\n",
    "# These values need to be passed into the plotting function\n",
    "data1_std = data1.std()\n",
    "d_data1_std = data1.differentiate('time').std()\n",
    "\n",
    "# data selected at the required longitude\n",
    "data1 = data1.sel(lon=lon)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "package_test_env",
   "language": "python",
   "name": "package_test_env"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.18"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
